<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!-- 全局扫描 -->
    <context:component-scan base-package="com.lucky.sm"/>
    <aop:aspectj-autoproxy/>

    <!-- Spring整合Mybatis -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/sm?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="1111"/>
    </bean>

    <!--Mybatis进行持久化操作需要SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--spring没有整合mybatis之前，mybatis需要配置文件，读取配文件信息构造sqlSessionFactory-->
        <!--整合之后，提供这么一个类。这个类定义了若干属性，和之前mybatis的配置文件一一对应，也就不用mybatis的主配置文件-->
        <!--这个类也有读取mybatis配置文件的功能 -->
        <property name="dataSource" ref="dataSource"/>
        <!--别名：指定一个包，这个包里的类都可以以简称的方式来调用，实体类：不加包名直接使用类名-->
        <property name="typeAliasesPackage" value="com.lucky.sm.entity"/>
    </bean>

    <!--自动映射：指定一个包，这个包放置对应的持久化操作接口和映射文件 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lucky.sm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 声明式事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--定义通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--对一些查询的操作，设置只读操作-->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <!--不是查询操作，必须事务查询。设置REQUIRED，当一个业务方法被调用的时候，先检查是不是包含在一个事务里。-->
            <!--如果包含在一个事务里，依赖这个事务。不含在一个事务里，封装成一个事务-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--面向切面-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.lucky.sm.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


</beans>